on:
  push:
    branches:
      - master
      - ghactions
  pull_request:
    branches:
      - master
  # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onschedule
  # schedule:
  #   - cron:  '0 0 * * 1' # every monday at midnight
  repository_dispatch:
    types:
      - all
      - check

name: Check

jobs:
  # # added so that the workflow doesn't fail.
  # always_runner:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Always run
  #       run: echo "This job is used to prevent the workflow status from showing as failed when all other jobs are skipped"

  JavaScript:
    runs-on: ubuntu-latest
    name: Typescript

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install
        run: >
          yarn install --frozen-lockfile

      - name: Lints
        run: >
          yarn check

      - name: Test
        run: >
          yarn test


  R-CMD-check:
    # if: false
    runs-on: ${{ matrix.config.os }}

    name: R ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: windows-latest, r: 'release'}
        - { os: windows-latest, r: 'devel'}
        - { os: macOS-latest, r: 'release'}
        # - { os: macOS-latest, r: 'devel'}
        - { os: ubuntu-18.04, r: 'release', rspm: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest"}
        # - { os: ubuntu-18.04, r: '3.6', rspm: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest"}
        # - { os: ubuntu-18.04, r: '3.5', rspm: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest"}
        - { os: ubuntu-18.04, r: '3.4', rspm: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.cran }}

    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ github.ref }}
          restore_keys: |
            ${{ runner.os }}-r-${{ matrix.config.r }}-${{ github.ref }}
            ${{ runner.os }}-r-${{ matrix.config.r }}-${{ github.base_ref }}

      - name: Install remotes
        run: >
          Rscript
          -e "if (system.file(package = 'remotes') == '') install.packages('remotes')"

      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: Install dependencies
        run: >
          Rscript
          -e "remotes::install_deps(dependencies = TRUE)"
          -e "remotes::install_cran('rcmdcheck')"

      - name: Check
        run: Rscript -e "rcmdcheck::rcmdcheck(args = '--no-manual', error_on = 'warning', check_dir = 'check')"

      - name: Headless Check
        timeout-minutes: 45
        run: >
          Rscript
          -e "remotes::install_cran(c('future', 'promises', 'magrittr', 'ggplot2'))"
          -e "remotes::install_local(); shinyjster:::test_jster_internal()"

      - name: Upload check results
        if: failure() # only for previous step
        uses: actions/upload-artifact@v1
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
